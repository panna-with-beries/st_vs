"""
2. Написати функцію, яка приймає два параметри: ім'я файлу та кількість символів.
   На екран повинен вивестись список із трьома блоками - символи з початку, із середини та з кінця файлу.
   Кількість символів в блоках - та, яка введена в другому параметрі.
   Придумайте самі, як обробляти помилку, наприклад, коли кількість символів більша, ніж є в файлі (наприклад, файл із двох символів і треба вивести по одному символу, то що виводити на місці середнього блоку символів?)
   В репозиторій додайте і ті файли, по яким робили тести.
   Як визначати середину файлу (з якої брать необхідні символи) - кількість символів поділити навпіл, а отримане "вікно" символів відцентрувати щодо середини файла і взяти необхідну кількість. В разі необхідності заокруглення одного чи обох параметрів - дивіться на свій розсуд.
   Наприклад:
   █ █ █ ░ ░ ░ ░ ░ █ █ █ ░ ░ ░ ░ ░ █ █ █    - правильно
                     ⏫ центр
   █ █ █ ░ ░ ░ ░ ░ ░ █ █ █ ░ ░ ░ ░ █ █ █    - неправильно
                     ⏫ центр
"""
import pathlib

def print_string_file(name_file, n):
   with open(pathlib.Path(__file__).parent.resolve().joinpath(name_file), 'r') as file:
      line = file.read()
      len_str = len(line)
      if len_str < n * 3:
         print('error')
      else:
         res = line[:n]
         space = len_str - n * 3
         right = space // 2
         left = space - right

         
         res += '*' * left
         
         tmp = n + left
         res += line[tmp: tmp + n]
         res += '*' * right
         res += line[-n:]
         print(res)


print_string_file('t1.txt', 3)
print_string_file('t2.txt', 2)
print_string_file('t2.txt', 2)
print_string_file('t2.txt', 20)
print(pathlib.Path(__file__).parent.joinpath('55.txt'))